@name Beam data tester
@inputs
@outputs [A B C]:array
@persist Src:entity
@trigger none

if(first() || dupefinished())
{
    Src = entity():isConstrainedTo(1)

    event tick()
    {
        P = 1

        A[1, vector] = Src:laserGetDataOrigin(1)
        A[2, vector] = Src:laserGetDataDirect(1)
        A[3, number] = Src:laserGetDataLength(1)
        A[4, number] = Src:laserGetDataDamage(1)
        A[5, number] = Src:laserGetDataWidth(1)
        A[6, number] = Src:laserGetDataForce(1)
        B[1, number] = Src:laserGetDataRange(1)
        B[2, entity] = Src:laserGetDataSource(1)
        B[3, number] = Src:laserGetDataIsReflect(1)
        B[4, number] = Src:laserGetDataIsRefract(1)
        B[5, number] = Src:laserGetDataBounceMax(1)
        B[6, number] = Src:laserGetDataBounceRest(1)
        B[7, number] = Src:laserGetDataLengthRest(1)
        C[1, vector] = Src:laserGetDataPointNode(1,P)
        C[2, number] = Src:laserGetDataPointWidth(1,P)
        C[3, number] = Src:laserGetDataPointDamage(1,P)
        C[4, number] = Src:laserGetDataPointForce(1,P)
        C[5, number] = Src:laserGetDataPointIsDraw(1,P)
        C[6, number] = Src:laserGetDataPointSize(1)
    }
}
